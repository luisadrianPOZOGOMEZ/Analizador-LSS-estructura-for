Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    DIVIDE
    GT
    LBRACKET
    MINUS
    NOT
    PR_ELSE
    PR_IF
    PR_RETURN
    PR_WHILE
    RBRACKET
    TIMES

Grammar

Rule 0     S' -> program
Rule 1     program -> statement_list
Rule 2     statement_list -> statement
Rule 3     statement_list -> statement_list statement
Rule 4     statement -> for_statement
Rule 5     statement -> print_statement
Rule 6     for_statement -> PR_FOR LPAREN TYPE_INT ID EQUALS NUM SEMICOLON ID LT NUM SEMICOLON ID PLUS PLUS RPAREN LBRACE print_statement RBRACE
Rule 7     print_statement -> ID DOT ID DOT ID LPAREN STRING RPAREN SEMICOLON

Terminals, with rules where they appear

DIVIDE               : 
DOT                  : 7 7
EQUALS               : 6
GT                   : 
ID                   : 6 6 6 7 7 7
LBRACE               : 6
LBRACKET             : 
LPAREN               : 6 7
LT                   : 6
MINUS                : 
NOT                  : 
NUM                  : 6 6
PLUS                 : 6 6
PR_ELSE              : 
PR_FOR               : 6
PR_IF                : 
PR_RETURN            : 
PR_WHILE             : 
RBRACE               : 6
RBRACKET             : 
RPAREN               : 6 7
SEMICOLON            : 6 6 7
STRING               : 7
TIMES                : 
TYPE_INT             : 6
error                : 

Nonterminals, with rules where they appear

for_statement        : 4
print_statement      : 5 6
program              : 0
statement            : 2 3
statement_list       : 1 3

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement_list
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . for_statement
    (5) statement -> . print_statement
    (6) for_statement -> . PR_FOR LPAREN TYPE_INT ID EQUALS NUM SEMICOLON ID LT NUM SEMICOLON ID PLUS PLUS RPAREN LBRACE print_statement RBRACE
    (7) print_statement -> . ID DOT ID DOT ID LPAREN STRING RPAREN SEMICOLON

    PR_FOR          shift and go to state 6
    ID              shift and go to state 7

    program                        shift and go to state 1
    statement_list                 shift and go to state 2
    statement                      shift and go to state 3
    for_statement                  shift and go to state 4
    print_statement                shift and go to state 5

state 1

    (0) S' -> program .



state 2

    (1) program -> statement_list .
    (3) statement_list -> statement_list . statement
    (4) statement -> . for_statement
    (5) statement -> . print_statement
    (6) for_statement -> . PR_FOR LPAREN TYPE_INT ID EQUALS NUM SEMICOLON ID LT NUM SEMICOLON ID PLUS PLUS RPAREN LBRACE print_statement RBRACE
    (7) print_statement -> . ID DOT ID DOT ID LPAREN STRING RPAREN SEMICOLON

    $end            reduce using rule 1 (program -> statement_list .)
    PR_FOR          shift and go to state 6
    ID              shift and go to state 7

    statement                      shift and go to state 8
    for_statement                  shift and go to state 4
    print_statement                shift and go to state 5

state 3

    (2) statement_list -> statement .

    PR_FOR          reduce using rule 2 (statement_list -> statement .)
    ID              reduce using rule 2 (statement_list -> statement .)
    $end            reduce using rule 2 (statement_list -> statement .)


state 4

    (4) statement -> for_statement .

    PR_FOR          reduce using rule 4 (statement -> for_statement .)
    ID              reduce using rule 4 (statement -> for_statement .)
    $end            reduce using rule 4 (statement -> for_statement .)


state 5

    (5) statement -> print_statement .

    PR_FOR          reduce using rule 5 (statement -> print_statement .)
    ID              reduce using rule 5 (statement -> print_statement .)
    $end            reduce using rule 5 (statement -> print_statement .)


state 6

    (6) for_statement -> PR_FOR . LPAREN TYPE_INT ID EQUALS NUM SEMICOLON ID LT NUM SEMICOLON ID PLUS PLUS RPAREN LBRACE print_statement RBRACE

    LPAREN          shift and go to state 9


state 7

    (7) print_statement -> ID . DOT ID DOT ID LPAREN STRING RPAREN SEMICOLON

    DOT             shift and go to state 10


state 8

    (3) statement_list -> statement_list statement .

    PR_FOR          reduce using rule 3 (statement_list -> statement_list statement .)
    ID              reduce using rule 3 (statement_list -> statement_list statement .)
    $end            reduce using rule 3 (statement_list -> statement_list statement .)


state 9

    (6) for_statement -> PR_FOR LPAREN . TYPE_INT ID EQUALS NUM SEMICOLON ID LT NUM SEMICOLON ID PLUS PLUS RPAREN LBRACE print_statement RBRACE

    TYPE_INT        shift and go to state 11


state 10

    (7) print_statement -> ID DOT . ID DOT ID LPAREN STRING RPAREN SEMICOLON

    ID              shift and go to state 12


state 11

    (6) for_statement -> PR_FOR LPAREN TYPE_INT . ID EQUALS NUM SEMICOLON ID LT NUM SEMICOLON ID PLUS PLUS RPAREN LBRACE print_statement RBRACE

    ID              shift and go to state 13


state 12

    (7) print_statement -> ID DOT ID . DOT ID LPAREN STRING RPAREN SEMICOLON

    DOT             shift and go to state 14


state 13

    (6) for_statement -> PR_FOR LPAREN TYPE_INT ID . EQUALS NUM SEMICOLON ID LT NUM SEMICOLON ID PLUS PLUS RPAREN LBRACE print_statement RBRACE

    EQUALS          shift and go to state 15


state 14

    (7) print_statement -> ID DOT ID DOT . ID LPAREN STRING RPAREN SEMICOLON

    ID              shift and go to state 16


state 15

    (6) for_statement -> PR_FOR LPAREN TYPE_INT ID EQUALS . NUM SEMICOLON ID LT NUM SEMICOLON ID PLUS PLUS RPAREN LBRACE print_statement RBRACE

    NUM             shift and go to state 17


state 16

    (7) print_statement -> ID DOT ID DOT ID . LPAREN STRING RPAREN SEMICOLON

    LPAREN          shift and go to state 18


state 17

    (6) for_statement -> PR_FOR LPAREN TYPE_INT ID EQUALS NUM . SEMICOLON ID LT NUM SEMICOLON ID PLUS PLUS RPAREN LBRACE print_statement RBRACE

    SEMICOLON       shift and go to state 19


state 18

    (7) print_statement -> ID DOT ID DOT ID LPAREN . STRING RPAREN SEMICOLON

    STRING          shift and go to state 20


state 19

    (6) for_statement -> PR_FOR LPAREN TYPE_INT ID EQUALS NUM SEMICOLON . ID LT NUM SEMICOLON ID PLUS PLUS RPAREN LBRACE print_statement RBRACE

    ID              shift and go to state 21


state 20

    (7) print_statement -> ID DOT ID DOT ID LPAREN STRING . RPAREN SEMICOLON

    RPAREN          shift and go to state 22


state 21

    (6) for_statement -> PR_FOR LPAREN TYPE_INT ID EQUALS NUM SEMICOLON ID . LT NUM SEMICOLON ID PLUS PLUS RPAREN LBRACE print_statement RBRACE

    LT              shift and go to state 23


state 22

    (7) print_statement -> ID DOT ID DOT ID LPAREN STRING RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 24


state 23

    (6) for_statement -> PR_FOR LPAREN TYPE_INT ID EQUALS NUM SEMICOLON ID LT . NUM SEMICOLON ID PLUS PLUS RPAREN LBRACE print_statement RBRACE

    NUM             shift and go to state 25


state 24

    (7) print_statement -> ID DOT ID DOT ID LPAREN STRING RPAREN SEMICOLON .

    PR_FOR          reduce using rule 7 (print_statement -> ID DOT ID DOT ID LPAREN STRING RPAREN SEMICOLON .)
    ID              reduce using rule 7 (print_statement -> ID DOT ID DOT ID LPAREN STRING RPAREN SEMICOLON .)
    $end            reduce using rule 7 (print_statement -> ID DOT ID DOT ID LPAREN STRING RPAREN SEMICOLON .)
    RBRACE          reduce using rule 7 (print_statement -> ID DOT ID DOT ID LPAREN STRING RPAREN SEMICOLON .)


state 25

    (6) for_statement -> PR_FOR LPAREN TYPE_INT ID EQUALS NUM SEMICOLON ID LT NUM . SEMICOLON ID PLUS PLUS RPAREN LBRACE print_statement RBRACE

    SEMICOLON       shift and go to state 26


state 26

    (6) for_statement -> PR_FOR LPAREN TYPE_INT ID EQUALS NUM SEMICOLON ID LT NUM SEMICOLON . ID PLUS PLUS RPAREN LBRACE print_statement RBRACE

    ID              shift and go to state 27


state 27

    (6) for_statement -> PR_FOR LPAREN TYPE_INT ID EQUALS NUM SEMICOLON ID LT NUM SEMICOLON ID . PLUS PLUS RPAREN LBRACE print_statement RBRACE

    PLUS            shift and go to state 28


state 28

    (6) for_statement -> PR_FOR LPAREN TYPE_INT ID EQUALS NUM SEMICOLON ID LT NUM SEMICOLON ID PLUS . PLUS RPAREN LBRACE print_statement RBRACE

    PLUS            shift and go to state 29


state 29

    (6) for_statement -> PR_FOR LPAREN TYPE_INT ID EQUALS NUM SEMICOLON ID LT NUM SEMICOLON ID PLUS PLUS . RPAREN LBRACE print_statement RBRACE

    RPAREN          shift and go to state 30


state 30

    (6) for_statement -> PR_FOR LPAREN TYPE_INT ID EQUALS NUM SEMICOLON ID LT NUM SEMICOLON ID PLUS PLUS RPAREN . LBRACE print_statement RBRACE

    LBRACE          shift and go to state 31


state 31

    (6) for_statement -> PR_FOR LPAREN TYPE_INT ID EQUALS NUM SEMICOLON ID LT NUM SEMICOLON ID PLUS PLUS RPAREN LBRACE . print_statement RBRACE
    (7) print_statement -> . ID DOT ID DOT ID LPAREN STRING RPAREN SEMICOLON

    ID              shift and go to state 7

    print_statement                shift and go to state 32

state 32

    (6) for_statement -> PR_FOR LPAREN TYPE_INT ID EQUALS NUM SEMICOLON ID LT NUM SEMICOLON ID PLUS PLUS RPAREN LBRACE print_statement . RBRACE

    RBRACE          shift and go to state 33


state 33

    (6) for_statement -> PR_FOR LPAREN TYPE_INT ID EQUALS NUM SEMICOLON ID LT NUM SEMICOLON ID PLUS PLUS RPAREN LBRACE print_statement RBRACE .

    PR_FOR          reduce using rule 6 (for_statement -> PR_FOR LPAREN TYPE_INT ID EQUALS NUM SEMICOLON ID LT NUM SEMICOLON ID PLUS PLUS RPAREN LBRACE print_statement RBRACE .)
    ID              reduce using rule 6 (for_statement -> PR_FOR LPAREN TYPE_INT ID EQUALS NUM SEMICOLON ID LT NUM SEMICOLON ID PLUS PLUS RPAREN LBRACE print_statement RBRACE .)
    $end            reduce using rule 6 (for_statement -> PR_FOR LPAREN TYPE_INT ID EQUALS NUM SEMICOLON ID LT NUM SEMICOLON ID PLUS PLUS RPAREN LBRACE print_statement RBRACE .)

